1.Use Responsive Design with Bootstrap Fluid Containers
With responsive design, there is no need to design a mobile version of your website. 
It will look good on devices with screens of any width.
You can add Bootstrap to any app by adding the following code to the top of your HTML:
				
			<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous"/>

2.Make Images Mobile Responsive
In order to make an image to fit the width of any device when the website is accessed we enlist
the use of bootstrap's class called 'img-responsive'.

3.Center Text with Bootstrap
In order to center our heading we make use of bootstrap's text-center class. Keep note that we
can have several classes in one line provided each is seperated by a space e.g

            <h2 class="red-text text-center"> Red Centred Heading</h2>

4.Create a Bootstrap Button
Bootstrap has its own way of styling buttons, which are more visually appealing more than the plain
HTML buttons. We use the class "btn btn-default" in order to add a bootstrap button.

5.Create a Block Element Bootstrap Button
Normally, your button elements with the btn and btn-default classes are only as wide as
the text that they contain. to make your buttons block level elements meaning no other HTML
element appears horizontally next to it we invoke the "btn-block" bootstrap class, which makes your
bootstrap button to fully spread horizontally on the page and any other element following it will
fall into the next like on the webpage.

6.Bootstrap button colors
In order to add color to your bootstrap button you can invoke the use of "btn-primary" which will
fill your bootstrap button with the primary colour of blue.

7.Call out Optional Actions with btn-info
bootstrap comes equipped with several pre-defined colors for buttons. The "btn-info" class is used
to call to attention optional actions that a user can take.

8.Warn Your Users of a Dangerous Action with btn-danger
The "btn btn-danger" class is used to warn users of destructive actions that could happen when the button
is clicked.Since bootstrap comes with several pre-defined colors for buttons the "btn-danger"
button's default color is red.

9.Use the Bootstrap Grid to Put Elements Side By Side
Bootstrap uses a 12-column grid system.This allows us to put elements in rows and specify
each element's relative width. Most of bootstrap's classes are applied within the div tag.
Bootstrap has different column width attributes that it uses depending on how wide the
user's screen is.
Take for example "col-md-*" md stands for medium and the asterisk specifies how many columns
wide should an element be. There is also the "col-xs-*" class whereby xs stands for extra small.

10.Ditch Custom CSS for Bootstrap/Use a span to Target Inline Elements
By using the inline span element, you can put several elements on the same line, and even style
different parts of the same line differently.

11.Create a Custom Heading
Remember that bootstrap uses a 12-column grid system, this allows us to to easily put elements in
rows and specify each element's width using bootstrap's col-md-* or col-xs-* classes. We can easily put
a heading and an image on the same line without hassle and to top it all off its responsive so no
need to worry about usability across various devices.

12.Add Font Awesome Icons to our Buttons
Awesome fonts is a convenient library of icons. These icons can be webfonts or vector graphics.
Their size is modified using pixels(px) hence their treated just like fonts. To add awesome fonts
library you need to include the below link to your code:

          <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.8.1/css/all.css" integrity="sha384-50oBUHEmvpQ+1lW4y57PTFmhCaXp0ML5d60M1M7uH2+nqUivzIebhndOJK28anvf" crossorigin="anonymous">

We can add icons to our buttons or other HTML elements using the <i> tag, originally this tag
was used to make text italic however it is now used to add icons , we can also make use of the
span tag to add icons to our elements.

13.Responsively Style Radio Buttons
We can also style our form elements using Bootstrap classes such as col-md-* and col-xs-*. We can
use them to style our radio buttons as well as checkboxes so that they appear uniformly so on any
device irrespective of their width sizes.

14.Style Text Inputs as Form Controls
As we mentioned earlier above, we can apply bootstrap classes to our input elements,so for this
section we are working with the bootstrap class "form-control" which we apply to our input field
of type text.

15.Line up Form Elements Responsively with Bootstrap
Now let's get your form input and your submission button on the same line.
We'll do this the same way we have previously: by using a div element with the
class row, and other div elements within it using the col-xs-* class.

16.Create a Bootstrap Headline
Now let's build something from scratch to practice our HTML, CSS and Bootstrap skills.
We'll build a jQuery playground, which we'll soon put to use in our jQuery challenges.

Now that we have a Bootstrap Row, let's split it into two columns to house our elements.
Create two div elements within your row, both with the class col-xs-6.

17.Create Bootstrap Wells
Bootstrap has a class called well that can create a visual sense of depth for your columns.
Nest one div element with the class well within each of your col-xs-6 div elements.

18.Add Elements within Your Bootstrap Wells
Now we're several div elements deep on each column of our row. This is as deep as we'll need
to go. Now we can add our button elements.
Nest three button elements within each of your div elements having the class name well.

19.Create a Class to Target with jQuery Selectors
Not every class needs to have corresponding CSS. Sometimes we create classes just for the
purpose of selecting these elements more easily using jQuery. Give each of your buttons the class
"target".

20.Add id Attributes to Bootstrap Elements
Recall that in addition to class attributes, you can give each of your elements an id attribute.
Each id must be unique to a specific element and used only once per page.
Let's give a unique id to each of our div elements of class well.
Remember that you can give an element an id like this:

<div class="well" id="center-well">

Give the well on the left the id of left-well. Give the well on the right the id of right-well.

21.Give Each Element a Unique id
We will also want to be able to use jQuery to target each button by its unique id.
Give each of your buttons a unique id, starting with target1 and ending with target6.

22.Learn How Script Tags and Document Ready Work
Inside your script element, add this code: $(document).ready(function() { to your script.
Then close it on the following line (still inside your script element) with: });

We'll learn more about functions later. The important thing to know is that code you
put inside this function will run as soon as your browser has loaded your page.
This is important because without your document ready function,
your code may run before your HTML is rendered, which would cause bugs.

23.Target HTML Elements with Selectors Using jQuery
All jQuery functions start with a $, usually referred to as a dollar sign operator, or as bling.
jQuery often selects an HTML element with a selector, then does something to that element.
For instance inorder to make your buttons bounce we can invoke a jQuery method on the selector
as follows:
        $("button").addClass("animated bounce");

To make this selector animation come to live you need to include a link to the CDN that activates
the animation class, after including the CDN link, you then need to include the following command
to each selector you want to animate e.g:
        <button class="animate__animated animate__bounce">My button</button>

24.Target the Same Element with Multiple jQuery Selectors
Now you know three ways of targeting elements: by type:
$("button"), by class: $(".btn"), and by id $("#target1").
Although it is possible to add multiple classes in a single .addClass() call,
let's add them to the same element in three separate ways.

25.Removing a class in jQuery
We can remove a certain class property using jQuery's removeclass() method, this helps us to
remove classes of the same property in a faster manner than individually targeting each class
property e.g $("button").removeClass("btn-default") will remove the "btn-default" class property
from all buttons.

26.Change the CSS of an Element Using jQuery
We can also change the CSS of an HTML element directly with jQuery.
jQuery has a function called .css() that allows you to change the CSS of an element.

        e.g $("#target1").css("color","red");

27.Disable an HTML property
You can also change the non-CSS properties of HTML elements with jQuery.
For example, you can disable buttons.When you disable a button, it will become
grayed-out and can no longer be clicked.jQuery has a function called .prop() that allows
you to adjust the properties of elements.Here's how you would disable all buttons:

        $("button").prop("disabled",true);

28.Change Text inside HTML Element using jQuery
Using jQuery, you can change the text between the start and end tags of an element.
You can even change HTML markup.jQuery has a function called .html() that lets you add
HTML tags and text within an element.Query also has a similar function called .text() that only
alters text without adding tags. In other words, this function will not evaluate
any HTML tags passed to it, but will instead treat it as the text you want to replace
the existing content with.

29.Remove and HTML element using jQuery
jQuery has a built method that we can use to remove an HTML element, take note this method is
different from the removeClass() method which removes an HTML property with a specific class name.
remove() method simply removes an HTML element and as such takes no parameters inside.

30.Use appendTo to Move Elements with jQuery
We can use jQuery's appendTo() method to move HTML elements to another element.
e.g $("#target1").appendTo("#right-well") will move button #target1 from the left-well to
the right-well

31.jQuery clone() method
In addition to appending one element to another element, we can also make a copy of an element
from one place to another using jQuery's clone() method e.g:

                   $("#target4").clone().appendTo("#left-well")
The above statement will copy button with id #target4 from the right-well to the left-well.

32.Target the Parent of an Element Using jQuery
Every HTML element has a parent element from which it inherits properties.
For example, your jQuery Playground h3 element has the parent element of
<div class="container-fluid">, which itself has the parent body.

    e.g $("#target1").parent().css("background-color","red")

Since button #target1 is the child element of the element with the id left-well, that makes
the div element with the id left-well its parent element, so the above jQuery statement will
change the background-color of the left-well to red.

33.Target the Children of an Element Using jQuery
Elements that occur under a parent element are referred to as the children element of the parent
element. For instance the div element with the id left-well is the parent element to the children
element with ids #target1 to #target3. the children() method allows you to access the chil elements
the parent element e.g:

        $("#right-well").children.css("color","orange");
The above jQuery statement will change the text color of the parent element's child elements.

34.Target a Specific Child of an Element Using jQuery
You've seen why id attributes are so convenient for targeting with jQuery selectors.
But you won't always have such neat ids to work with.
Fortunately, jQuery has some other tricks for targeting the right elements.
jQuery uses CSS Selectors to target elements. The target:nth-child(n) CSS selector
allows you to select all the nth elements with the target class or element type.

        e.g. $(".target:nth-child(2)").addClass("animated bounce");

The jquery statement above will target the second children of the parent element in each well and
then give each of them an animated bounce.

35.Target Even Elements Using jQuery
You can also target elements based on their positions using :odd or :even selectors.
Note that jQuery is zero-indexed which means the first element in a selection has a
position of 0. This can be a little confusing as, counter-intuitively, :odd selects the
second element (position 1), fourth element (position 3), and so on.

SASS
1.Store Data with Sass Variables
One feature of Sass that's different than CSS is it uses variables.
They are declared and set to store data, similar to JavaScript.
In JavaScript, variables are defined using the let and const keywords.
In Sass, variables start with a $ followed by the variable name.

Here are a couple examples:

            $main-fonts: Arial, sans-serif;
            $headings-color: green;
And to use the variables:

            h1 {
              font-family: $main-fonts;
              color: $headings-color;
            }
One example where variables are useful is when a number of elements need to be the same color.
If that color is changed, the only place to edit the code is the variable value.

2.Nest CSS with Sass
Sass allows nesting of CSS rules, which is a useful way of organizing a style sheet.
Normally, each element is targeted on a different line to style it, like so:

            nav {
              background-color: red;
            }

            nav ul {
              list-style: none;
            }

            nav ul li {
              display: inline-block;
            }
For a large project, the CSS file will have many lines and rules. This is where nesting can
help organize your code by placing child style rules within the respective parent elements:

            nav {
              background-color: red;

              ul {
                list-style: none;

                li {
                  display: inline-block;
                }
              }
            }
3.Create Reusable CSS with Mixins
In Sass, a mixin is a group of CSS declarations that can be reused throughout the style sheet.

Newer CSS features take time before they are fully adopted and ready to use in all browsers. As features are added to browsers, CSS rules using them may need vendor prefixes. Consider box-shadow:

            div {
              -webkit-box-shadow: 0px 0px 4px #fff;
              -moz-box-shadow: 0px 0px 4px #fff;
              -ms-box-shadow: 0px 0px 4px #fff;
              box-shadow: 0px 0px 4px #fff;
            }
It's a lot of typing to re-write this rule for all the elements that have a box-shadow, or to change each value to test different effects. Mixins are like functions for CSS. Here is how to write one:

            @mixin box-shadow($x, $y, $blur, $c){
              -webkit-box-shadow: $x $y $blur $c;
              -moz-box-shadow: $x $y $blur $c;
              -ms-box-shadow: $x $y $blur $c;
              box-shadow: $x $y $blur $c;
            }
The definition starts with @mixin followed by a custom name. The parameters (the $x, $y, $blur, and $c in the example above) are optional. Now any time a box-shadow rule is needed, only a single line calling the mixin replaces having to type all the vendor prefixes. A mixin is called with the @include directive:

            div {
              @include box-shadow(0px, 0px, 4px, #fff);
            }

Usage Example:
Write a mixin for border-radius and give it a $radius parameter.
It should use all the vendor prefixes from the example.
Then use the border-radius mixin to give the #awesome element a border radius of 15px.

            <body>
                <div id="awesome"></div>
            </body>

            <style type="text/scss">
                @mixin border-radius($radius){
                    -webkit-border-radius: $radius;
                    -moz-border-radius:$radius;
                    -ms-border-radius:$radius;
                    border-radius:$radius
                }

                #awesome{
                    background-color: pink;
                    height: 100px;
                    width:100px;

                    @include border-radius(50px);
                }
            </style>

4.Use @if and @else to Add Logic To Your Styles
The @if directive in Sass is useful to test for a specific case - it works just like the if
statement in JavaScript.

            @mixin make-bold($bool) {
              @if $bool == true {
                font-weight: bold;
              }
            }
And just like in JavaScript, @else if and @else test for more conditions:

            @mixin text-effect($val) {
              @if $val == danger {
                color: red;
              }
              @else if $val == alert {
                color: yellow;
              }
              @else if $val == success {
                color: green;
              }
              @else {
                color: black;
              }
            }
Usage Example:
Create a mixin called border-stroke that takes a parameter $val. The mixin should check for
the following conditions using @if, @else if, and @else:

            light - 1px solid black
            medium - 3px solid black
            heavy - 6px solid black
If $val is not light, medium, or heavy, the border should be set to none.


            <style type="text/scss">
            @mixin border-stroke($x){
                -webkit-border-stroke:$x;
                -moz-border-stroke:$x;
                -ms-border-stroke:$x;
                border-stroke:$x;
            }

            @if $val== light {
                border: 1px solid black;
            }
            @else if $val==medium{
                border: 3px solid black;
            }
            @else if $val==heavy{
                border: 6px solid black;
            }
            @else{
                border:none;
            }

            #box{
                background-color:black;
                width:100px;
                height:100px;
                @include border-stroke(medium);
            }

            </style>

            <body>
                <div id="box></box>
            </body

